编译原理实验汇报
卢雨轩 19071125 张翼翔 19071126 王薪宇 19071128 刘阳 19071127
2022 年 6 月 7 日

第一章

基于递归下降子程序的三地址代码生成
程序

1.1.1

实验目的

1.1.2

实验内容

1.1.3

实验结果

1.2.1

实验目的

1.2.2

实验内容

1.2.3

实验结果

1.1

词法分析子系统

1.2

语法分析子系统

1.3
1.3.1

实验目的

1.3.2

实验内容

1.3.3

实验结果

三地址代码生成系统

1

第二章

LR 分析表自动构建系统
2.1

实验内容

2.2

实验结果

2

第三章

面向 LLVM IR 的类 C 语言编译器

本项目完成了一个面向 LLVM IR [? ] 的类 C 语言编译器，支持任意维数的数组、指针、结构体等特
性，可由 LLVM 的编译器编译为各个平台的可执行程序，可链接 C ABI 的动态或静态库。下面，为本项
目做一个简单的介绍。

3.1

C ♭ 语言设计

本项目实现了一个简易的 C 语言。正如微软的、比 C 语言多一些功能和特性的，『升 C（C ♯ ）』语
言，我们的语言比 C 语言少一些特性，因此称为『降 C（C ♭ ）』。
语言的设计部分参考了《自制编译器 [? ] 》书籍中的 C ♭ 语言，并为了实验作出了部分调整。总体上来
说，C ♭ 语言与 C 语言的区别如下：
1. 类型定义中，后置声明（如 *, [] 前移）
int a[5];

-->

int[5] a;

int *a, b;

-->

int* a; int b;

这样修改后，更复合现代语言（如 Rust、Java）等的设计，更贴合直觉。
2. 取消变量定义必须放在每个 block 的开头的限制
C ♭ 支持以下语法：
int i = 0;
printf(”%d\n”, i);
int j = 0;

3. 支持块注释的嵌套
得益于优秀的词法分析设计，C ♭ 支持块注释的嵌套使用：
/* 123
/* 233
*/
*/

4. 预处理器
由于本课程的重点并不包括预处理器，因此并没有实现预处理器，本编译器脱离预处理器也可以单
独运行。如果想要使用类似头文件的功能，C ♭ 语言也兼容使用 C 语言的预处理器（如 cpp 命令）。
5. 浮点数
由于工作量限制，C ♭ 语言的语法、语义解析与代码生成部分不支持浮点数。词法分析部分支持浮点
数，符合实验指导书中『附加要求』。

3

第三章 面向 LLVM IR 的类 C 语言编译器

4

6. enum
作为整数常量的语法糖，C 语言中的 enum 特性并没有得到广泛的使用。同样处于工作量角度考虑，
C ♭ 不支持 enum。
7. 结构体的位域
位域（bitﬁeld）是一个很少被听说、使用的 C 语言特性。同样，由于其很少被使用且因为工作量限
制，C ♭ 不支持位域。
8. volatile, register
由于 C ♭ 编译为 LLVM IR，由 LLVM 完成优化；同时 C 语言标准中，register 关键字也仅仅是『建
议』编译器将变量放置在寄存器中，现代编译器常常会不理会这个『建议』。因此，C ♭ 不支持这两
个关键字。
9. const、自引用类型（如结构体中包括指向自己的域）、while 与 do-while 循环
以上特性不影响语言的图灵完备性，均可通过其他方式达到（如使用 void* 指针和类型转换实现结
构体中包括指向自己的域、使用 for 循环替代 while 循环）
，因此，出于工作量角度考虑，C ♭ 不支
持以上特性。
10. 内联汇编
对于一门课程的实验来讲，内联汇编特性过于复杂。因此，C ♭ 不支持内联汇编。
不支持内联汇编意味着 C ♭ 无法直接发起系统调用。但是，C ♭ 支持各种各样的 Calling Convension，
在各个平台上均能动态或静态链接 C 语言标准库（如 musl、glibc）
，因此可以通过 C 语言标准库提
供的 printf/scanf 等函数提供输入输出支持。

3.1.1

程序示例

本程序演示了 C ♭ 语言的大部分特性。
// 注：此处使用了 C 语言的代码高亮，因此使用部分 C 语言不支持的特性（如块注释嵌套）的代码高亮
,→

会显示错误。

/* /* 块注释的嵌套 */ */
int a = 0x1234;

// 全局变量定义

int b = 'a';
char c = 3 + 235;

// 编译时常量定义

extern int printf(char*, ...);

// 外部函数声明

char * str = ”___Hello world from Cb lang!\n”;

// 字符串字面量

struct test{

// 结构体定义

int foo;
char bar;
};
int add(int a, int[] b){

// 接受任意长度数组、返回整数的函数定义

return a + b[0];
}
struct test fooo(void){
struct test ret;
ret.foo = 2;
ret.bar = 'c';
return ret;

// 返回结构体的函数定义

第三章 面向 LLVM IR 的类 C 语言编译器

5

}
int main(int argc, char** argv){

// 类 C 语言的 main 函数，支持命令行参数

auto ret = fooo();

// auto 关键字

printf(”%d %c\n”, ret.foo, ret.bar);

// 调用外部函数

int[5][2] array;

// 多维数组

int[5]* array_ptr = array;

// 转为数组指针

struct test ss;
struct test* ss_pointer = &ss;

// 结构体指针

ss.foo = 1234;

// 结构体赋值

printf(&str[3]);

// 对指针使用下标访问运算符、对右值取地址

printf(str + 3);

// 指针的数学运算

printf(”This is %d %d\n”, 2 + 1238796, a);

// 函数调用中的数学运算

printf(”Argc: %d\n”, argc);

// 命令行参数

array[0][0] = 0x123;

// 数组访问

printf(”array[0][0] = %d\n”, array[0][0]);
printf(”array_ptr[0][0] = %d\n”, array_ptr[0][0]);
if(argc == 1) {

// if 语句

printf(”Then\n”);
return -1;

// return 语句

} else {
printf(”Else\n”);
}
printf(”%d\n”, ss.bar);
int* pointer = &ss.bar;

// 对结构体的域取地址

*pointer = 0x1234;

// 指针解引用

printf(”%d\n”, ss.bar);
ss_pointer->foo = 0;

// 结构体指针使用-> 运算符

printf(”%d\n”, ss.foo);
printf(”A + B = %d\n”, add(2, array[0]));

// 将二维数组中的一维数组作为参数

printf(”argv: %s\n”, argv[0]);
1 && printf(”not_reached”);

// 按位与运算符的短路

0 && printf(”good\n”);
0 || printf(”not_reached”);

// 按位或运算符的短路

1 || printf(”good\n”);
(0,1) || printf(”good\n”);

// 逗号表达式

printf(”1+2*3=%d\n”, 1 + 2 * 3 * 3 / 3);
if (!1) {
printf(”not reached”);
} else {
printf(”good\n”);
}
int i = 0;
for(i = 0; i < argc; ++ i){

// for 循环

if (i == 3){
printf(”Break!”);
break;

// break 语句

第三章 面向 LLVM IR 的类 C 语言编译器

6

} else if(i == 2){
printf(”Contine!”);
// continue 语句

continue;
}
printf(”for %d\n”, i);
}
}

3.2
3.2.1

工具选择

词法与语法生成器

本编译器采用 ANTLR [? ] （ANother Tool for Language Recognition）作为词法、语法解析器的生成
器。ANTLR 基于递归下降生成语法解析程序，支持 ALL*（Adaptive LL(*)）文法，比传统的 LL（*）适
用性更广。同时，相比 yacc 等基于 LR 的解析器生成器，基于递归下降这一点使得他生成的代码更可读。
同时，ANTLR 具有优秀的错误处理和恢复能力，可以处理词法和词法分析过程中出现的绝大部分错误。
他还支持在语法解析的过程中内联动作, 这使得他可以在语法分析的同时完成语义分析。由以上原因，本
编译器采用 ANTLR 作为词法和语法解析器的生成器。

3.2.2

编程语言

本编译器采用 Rust 语言编写。在编译器这个项目上，使用 Rust 语言具有以下优势：
• Tagged Union 与 Pattern Matching
Rust 语言独有的 Tagged Union 非常适合在编写编译器过程中可能会用到的数据结构。如，以下代
码是 C ♭ 编译器的类型节点的定义：
pub enum Type {
Void,
Integer {
signed: bool,
size: usize,
},
Array {
size: usize,
element_type: Arc<Type>,
},
Function {
return_type: Arc<Type>,
parameters: Vec<(String, Arc<Type>)>,
variadic: bool,
},
Pointer {
element_type: Arc<Type>,
},
Struct {
name: String,

第三章 面向 LLVM IR 的类 C 语言编译器

7

fields: Vec<(String, Arc<Type>)>,
location: Range<usize>,
},
}

使用 Tagged Union 与 Pattern Matching 可以有效减少重复的代码量，并减少现代面向对象语言中
虚表的开销。
• 编译时的生命周期检查
Rust 将引用的生命周期作为类型系统的一部分，使得其可以在编译时进行变量引用的声明周期检查。
这使得 Rust 可以称为『内存安全的编程语言』
，也就是说，只要不使用 unsafe 关键字，代码就不会
出现未定义行为。
在编写编译器的过程中，抽象语法树节点之间会互相引用，在这样一个具有大量对象的引用的场景
下，如果使用 C++ 等传统语言，若代码写错一点就可能造成程序段错误，难以排查。使用 Rust 则
可以在编译时解决这类问题，加快项目开发的速度与时间。

3.2.3

中间表示语言

本项目采用 LLVM IR [? ] 作为中间表示语言，并使用 LLVM 编译器输出最终的可执行文件。LLVM
IR 作为一种底层的中间表示语言，其形式更像是汇编。他抽象了各个目标平台不同的部分，提供了一个
统一的接口，提供强大的优化能力，使得编写编译器的人可以专注于前端。现代的编程语言或编译器，如
Rust、Clang 等，均使用 LLVM 作为后端，在减少工作量的同时接入 LLVM 生态，支持多种目标平台。
LLVM 虚拟机有如下特点：
1. 有无穷多个寄存器，可以是命名的（如%a），也可以是匿名的（如%0）
2. 提供整数、浮点数、指针、向量、数组、结构体等多种类型
(a) 支持任意长度整数（1 位到 256 位）
，支持 IEEE-754 定义的 32 位、64 位浮点数，支持 x86 的
80 位浮点数以及 PowerPC 的 128 位浮点数
3. 可以使用 alloca 函数分配栈空间内存；可以调用 C 标准库的 malloc 函数分配堆空间内存
4. 通过 load、store 指令操作内存
5. 所有寄存器均是 SSA（Static Single Assignment）的，意味着只能从固定来源复制一次
(a) 这样，寄存器之间的赋值关系就可以构造一个有向无环图，可以在图上做代码优化
(b) 内存不是 SSA 的，意味着 load、store 指令有副作用，其他指令均无副作用
6. 使用 Intrinsics 抽象针对部分目标平台优化的常见操作
(a) 如：提供 @llvm.ctpop.i32 函数来数一个 32 位数字的二进制表示中有几个 1。在 x86 平台上，
这个 Intrinsic 会编译为popcnt指令，而在不支持 popcnt 指令的平台，如 RISC-V 中，会编译为
调用 LLVM 提供的函数。

3.3

词法与语法分析

C ♭ 编译器使用 ANTLR 生成词法和语法分析器。

第三章 面向 LLVM IR 的类 C 语言编译器

3.3.1

语法描述

语法的描述文件如下（略去语义分析部分）：
grammar Cb;
// 词法分析部分
LINE_COMMENT: '//' .*? '\r'? '\n' -> skip;

// Allow recursive block comments
BLOCK_COMMENT: '/*' (BLOCK_COMMENT | .)*? '*/' -> skip;

SPACES: ('\n' | '\r' | '\t' | ' ')+ -> skip;

VOID: 'void';
CHAR: 'char';
SHORT: 'short';
INT: 'int';
LONG: 'long';
STRUCT: 'struct';
UNION: 'union';
ENUM: 'enum';
STATIC: 'static';
EXTERN: 'extern';
CONST: 'const';
SIGNED: 'signed';
UNSIGNED: 'unsigned';
IF: 'if';
ELSE: 'else';
SWITCH: 'switch';
CASE: 'case';
DEFAULT: 'default';
WHILE: 'while';
DO: 'do';
FOR: 'for';
RETURN: 'return';
BREAK: 'break';
CONTINUE: 'continue';
GOTO: 'goto';
TYPEDEF: 'typedef';
SIZEOF: 'sizeof';
AUTO: 'auto';

IDENTIFIER: [a-zA-Z_][a-zA-Z0-9_]*;

// Literals
INTEGER: INT10 | INT8 | INT16;
REAL: REAL10 | REAL8 | REAL16;

8

第三章 面向 LLVM IR 的类 C 语言编译器

fragment INT10: '0' | [1-9]DIGIT10*;
fragment INT8: '0' [1-7]DIGIT8*;
fragment INT16: '0x' [1-9a-fA-F]DIGIT16*;

fragment REAL10: INT10 '.' DIGIT10*;
fragment REAL8: INT8 '.' DIGIT8*;
fragment REAL16: INT16 '.' DIGIT16*;

fragment DIGIT10: [0-9];
fragment DIGIT16: [0-9a-fA-F];
fragment DIGIT8: [0-7];

CHAR_LITERAL: '\'' CCHAR '\'';
STRING_LITERAL: '”' SCHAR*? '”';
fragment CCHAR: ~[”\\\r\n] | ESCAPE;
fragment SCHAR: ~[”\\\r\n] | ESCAPE | '\\\n' | '\\\r\n';
fragment ESCAPE: '\\' ['”abfnrtv\\];
compUnit: topDef+ EOF;
name: IDENTIFIER;
topDef: funcDef | funcDecl | varDef | structDef;

varDef: typedVarDef | autoVarDef;
autoVarDef:
AUTO name '=' init=assignmentExpr(',' name '=' init=assignmentExpr)*;
typedVarDef:
storage typeName name ('=' assignmentExpr) ?(',' name ('=' assignmentExpr)?)* ';';

constDef: CONST typeName name '=' expr ';';
funcDef:
storage typeName name '(' params ')' block;
funcDecl:
EXTERN typeName name '(' paramsDecl ')' ';';
storage: STATIC?;
params:
VOID
| param ( ',' param )*;
param:
typeName name ;
paramsDecl:
VOID
| paramDecl ( ',' paramDecl)* ( ',' '...')?;
paramDecl:
typeName;
block:

9

第三章 面向 LLVM IR 的类 C 语言编译器

10

'{' (varDef | stmt)* '}';
structDef:
STRUCT name memberList ';';
memberList:
'{' ( member ';')* '}';
member:
typeName name ;
typeName:
typeBase (
'[' ']'
| '[' INTEGER ']'
| '*'
)*;
paramtypes :
VOID | ( typeName ) (','typeName )* ( ',' '...' )?;
typeBase:
VOID | CHAR | SHORT | INT | LONG | UNSIGNED CHAR | UNSIGNED SHORT | UNSIGNED INT | UNSIGNED
,→

LONG | STRUCT IDENTIFIER;

stmts: stmt*;
stmt:
';' #empty
| expr ';' #exprStmt
| block

#blockStmt

| ifStmt

#if

| whileStmt #while
| dowhileStmt #dowhile
| forStmt #for
| breakStmt #break
| continueStmt #contine
| returnStmt #return;
labeledStmt: IDENTIFIER ':' stmt;
ifStmt:
IF '(' expr ')' stmt (ELSE stmt)?;
whileStmt: WHILE '(' expr ')' stmt;
dowhileStmt: DO stmt WHILE '(' expr ')';
forStmt:
FOR '(' expr ';' expr ';' expr ')' stmt;
switchStmt: SWITCH '(' expr ')' '{' caseClauses '}';
caseClauses: caseClause* defaultClause?;
caseClause: cases () caseBody;
cases: (CASE primary ':')+;
defaultClause: DEFAULT ':' caseBody;
caseBody: (stmt)+;
// gotoStmt: GOTO IDENTIFIER ';';
breakStmt: BREAK ';';
continueStmt: CONTINUE ';';

第三章 面向 LLVM IR 的类 C 语言编译器

11

returnStmt: RETURN expr? ';';

postfixExpr:
primary( '++' | '--' | '[' expr ']',| '.' IDENTIFIER | '->' IDENTIFIER | '(' args ')' )*;
unaryExpr
:
'++'
| '--' castExpr
| '+' castExpr
| '-' castExpr
| '!' castExpr
| '~' castExpr
| '*' castExpr
| '&' castExpr
| postfixExpr;
castExpr
: '(' typeName ')' castExpr
| unaryExpr;
mulDivExpr
: castExpr (
'*' castExpr
| '/' castExpr
| '%' castExpr
)*;
addSubExpr
: mulDivExpr (
'+' mulDivExpr
| '-' mulDivExpr
)*;
shiftExpr
: addSubExpr ( '<<' addSubExpr

| '>>' addSubExpr )*;

relExpr
: shiftExpr

( '<' shiftExpr

| '>' shiftExpr

eqExpr: relExpr

( '==' relExpr

| '!=' relExpr )*;

| '<=' shiftExpr

| '>=' shiftExpr )*;

andExpr
: eqExpr ( '&' eqExpr)*;
xorExpr: andExpr

( '^' andExpr )*;

orExpr: xorExpr

( '|' xorExpr )*;

logicAndExpr: orExpr

( '&&' orExpr )*;

logicOrExpr: logicAndExpr
condExpr: logicOrExpr

( '||' logicAndExpr )*;

( '?' true_expr = logicOrExpr ':' false_expr = logicOrExpr )*;

// Only unaryExpr and below can produce lvalues
// So putting unaryExpr in assignmentExpr can forbid
// Syntactic error grammarly.
assignmentExpr:
condExpr

第三章 面向 LLVM IR 的类 C 语言编译器

12

| unaryExpr '=' assignmentExpr
| unaryExpr '+=' assignmentExpr
| unaryExpr '-=' assignmentExpr
| unaryExpr '*=' assignmentExpr
| unaryExpr '/=' assignmentExpr
| unaryExpr '%=' assignmentExpr
| unaryExpr '&=' assignmentExpr
| unaryExpr '|=' assignmentExpr
| unaryExpr '^=' assignmentExpr
| unaryExpr '<<=' assignmentExpr
| unaryExpr '>>=' assignmentExpr
;
expr:
assignmentExpr ( ',' assignmentExpr )*;
args: ( assignmentExpr

(

',' assignmentExpr )*)?;

primary:
INTEGER
| CHAR_LITERAL
| STRING_LITERAL
| IDENTIFIER
| '(' expr ')';

3.3.2

抽象语法树节点定义

类型定义
pub enum Type {
Void,
Integer {
signed: bool,
size: usize,
},
Array {
size: usize,
element_type: Arc<Type>,

// 元素类型

},
Function {
return_type: Arc<Type>,

// 返回类型

parameters: Vec<(String, Arc<Type>)>,

// 参数名字和类型

variadic: bool,

// 变长参数

},
Pointer {
element_type: Arc<Type>,
},
Struct {
name: String,

// 指向的类型

第三章 面向 LLVM IR 的类 C 语言编译器

13

fields: Vec<(String, Arc<Type>)>,

// 域的类型

location: Range<usize>,

// 定义在源代码中的位置

},
}

表达式节点接口
pub trait ExprNode: Node {
fn get_type(&self) -> Arc<Type>;
fn is_addressable(&self) -> bool;
// 获取表达式的值
fn value(
&self,
context: &'static Context,
module: &'static Module,
builder: &Builder<'static>,
) -> BasicValueEnum<'static> {
todo!(”value of {:?} isn't implemented”, self)
}
// 如果表达式是左值，获取地址
fn addr(
&self,
context: &'static Context,
module: &'static Module,
builder: &Builder<'static>,
) -> PointerValue<'static> {
todo!(”addr of {:?} isn't implemented”, self)
}
// 获取表达式的值，并进行默认类型转换
fn cast_value(
&self,
context: &'static Context,
module: &'static Module,
builder: &Builder<'static>,
to_type: Arc<Type>,
) -> BasicValueEnum<'static> {
if *self.get_type() == *to_type {
return self.value(context, module, builder);
}
// 允许数组转换为指针
if self.get_type().is_array() && to_type.is_pointer() {
if Type::element_type(self.get_type()) == Type::element_type(to_type) {
let value = self.addr(context, module, builder);
let zero = context.i32_type().const_int(0, false);
let addr = unsafe { builder.build_gep(value, &[zero, zero], ””) };
return addr.as_basic_value_enum();
} else {

第三章 面向 LLVM IR 的类 C 语言编译器

14

panic!(”cannot cast array to pointer with another element”);
}
}
// 其他情况使用类型之间的转换操作
// 理论上类型错误应该已经在语义分析中得到
// 所以不会报错
builder.build_cast(
self.get_type().cast_op(&*to_type),
self.value(context, module, builder),
to_type.to_llvm_type(context),
”cast”,
)
}
}

3.4

语义分析

C ♭ 编译器的语义分析部分使用 ANTLR 的内联动作，与语法分析同时完成。
下面针对语义分析的不同模块进行介绍。

3.4.1

类型推断

自定义类型的注册
C ♭ 编译器在语义分析的过程中进行类型推断。首先，在 parser 中维护一个自定义类型表：
pub struct CbParser {
pub types: HashMap<String, Arc<Type>>,
...
}

同时提供查找与注册类型的函数：
impl CbParser {
fn registerType(&mut self, name: String, t: Arc<Type>) -> Result<(), ParserError> {
// 插入到类型表中
let r = self.types.insert(name.clone(), t.clone());
match r {
None=> Ok(()),
// 如果已经存早，返回 TypeNameConflict 错误，并标柱类型上一次定义的位置
Some(old) => {
if let Type::Struct{ location, .. } = &*old{
Err(ParserError::TypeNameConflict(
name,
location.clone()
))
} else {
unreachable!();
}

第三章 面向 LLVM IR 的类 C 语言编译器

15

}
}
}
// 获取指定名字的类型
fn getType(&self, name: &str) -> Option<Arc<Type>> {
self.types.get(name).cloned()
}
}

即可在分析过程完成类型的查找与注册工作：
// 自定义类型的注册
structDef:
STRUCT name memberList ';' {
// 类型名字
let name = $name.text.to_owned();
// 源码中类型定义的位置，生成报错信息用
let location = $start.start as usize .. recog.get_current_token().stop as usize - 3;
// 用各个成员的类型构造类型
let selfType = Arc::new(Type::Struct{
name,
fields: $memberList.v.borrow().clone().into_iter().map(|x| (x.0, x.1)).collect(),
location
});
// 如果类型非法（如成员元素为 void 等）
，报错
report_or_unwrap!(selfType.is_legal(), recog);
let name = $name.text.to_owned();
// 注册类型到 parser 中，如果已经存在则报错

report_or_unwrap!(recog.registerType(name, selfType), recog, $name.ctx.start().token_index.load(Orderin
};

随后，在分析类型的 AST 节点中，同步标注节点的类型：
// 基本类型，直接构造对应的类型节点
typeBase
returns[Arc<Type> v]:
VOID {
$v = Arc::new(Type::Void);
}
| CHAR {
$v = Arc::new(Type::Integer{size: 8, signed: true});
}
| SHORT {
$v = Arc::new(Type::Integer{size: 16, signed: true});
}
| INT {
$v = Arc::new(Type::Integer{size: 32, signed: true});
}
| LONG {

第三章 面向 LLVM IR 的类 C 语言编译器

$v = Arc::new(Type::Integer{size: 64, signed: true});
}
| UNSIGNED CHAR {
$v = Arc::new(Type::Integer{size: 8, signed: false});
}
| UNSIGNED SHORT {
$v = Arc::new(Type::Integer{size: 16, signed: false});
}
| UNSIGNED INT {
$v = Arc::new(Type::Integer{size: 32, signed: false});
}
| UNSIGNED LONG {
$v = Arc::new(Type::Integer{size: 64, signed: false});
}
| STRUCT n = IDENTIFIER {
// 自定义类型，从类型表中读取
let t = match recog.getType($n.text) {
Some(t) => t.clone(),
None => {
let name = (&$n.text);
recog.notify_error_listeners(
format!(”Type struct {} not found”, name),
// last token
Some(recog.base.input.index() - 1),
None
);
return Err(
ANTLRError::FallThrough(Rc::new(
ParserError::TypeNotFound(name.to_string())
))
);
},
};
$v = t;
};
// 用基本类型节点构造复合类型
typeName
returns[Arc<Type> v]:
typeBase {$v = $typeBase.v;} (
'[' ']' {
// 变长数组，定义为指针
$v = Arc::new(Type::Pointer{element_type: (&$v).clone()});
}
| '[' INTEGER ']' {
// 定长数组，定义为数组

16

第三章 面向 LLVM IR 的类 C 语言编译器

17

$v = Arc::new(Type::Array{element_type: (&$v).clone(), size:
,→

str::parse::<usize>($INTEGER.text).unwrap()});
}
| '*' {
// 指针
$v = Arc::new(Type::Pointer{element_type: (&$v).clone()});
}
)*;

最后，在构造表达式的 AST 时，由具体的表达式节点根据元素的类型计算自己的类型，如二元运算
符节点：
impl ExprNode for BinaryExprNode {
fn get_type(&self) -> Arc<Type> {
match self.op {
// 对于逻辑和二元比较运算符，返回布尔类型
BinaryOp::LogicalAnd
| BinaryOp::LogicalOr
| BinaryOp::Eq
| BinaryOp::Ne
| BinaryOp::Ge
| BinaryOp::Gt
| BinaryOp::Le
| BinaryOp::Lt => BOOLEAN_TYPE.clone(),
// 对于逗号表达式，返回右操作数的类型
BinaryOp::Comma => self.rhs.get_type(),
// 其他情况，返回二元运算进行默认类型转换后的类型
// 如指针与整数做加法，返回指针
// 本函数被调用时，正在完成上层节点的语义分析，已经通过了当前节点的语义分析
// 故类型一定合法
_ => Type::binary_cast(self.lhs.get_type(), self.rhs.get_type()).unwrap(),
}
}
}

这样，就可以在构造 AST 的过程中同步完成类型解析。

3.4.2

变量的引用与消解

C ♭ 编译器通过作用域保存变量信息。
实体信息
作用域中可能保存的实体有两种，分别是变量或函数。其中函数只能存在于根作用域。
// 实体是函数或者变量
pub enum Entity {
Variable(VariableEntity),
Function(FunctionEntity),
}

第三章 面向 LLVM IR 的类 C 语言编译器

18

// 变量实体
pub struct VariableEntity {
pub name: String,
pub location: Range<usize>,
pub init_expr: Option<Box<dyn ExprNode>>,
pub _type: Arc<Type>,
// 变量的指针，可能是堆上的全局变量，也可能是栈上的局部变量
pub llvm: Option<PointerValue<'static>>,
}
// 函数实体
pub struct FunctionEntity {
pub name: String,
pub location: Range<usize>,
pub _type: Arc<Type>,
pub _extern: bool,
// 函数指针，也可能是链接的外部函数
pub llvm: Option<FunctionValue<'static>>,
}

根作用域
根作用域作为全局唯一的作用域，用于提供作用域栈以及调用下级作用域进行变量的引用与消解。
// 作用域定义
pub struct Scope {
// 根作用域，保存全局变量和函数
pub root: Arc<RefCell<SubScope>>,
// 当前作用域栈
stack: Vec<Arc<RefCell<SubScope>>>,
// 全部作用域
all_scopes: Vec<Arc<RefCell<SubScope>>>,
}
impl Scope {
// 创建一个新的作用域，其中创建全局作用域
pub fn new() -> Scope {
let s = Arc::new(RefCell::new(SubScope::new()));
Scope {
root: s.clone(),
stack: vec![s.clone()],
all_scopes: vec![s],
}
}
// 对作用域进行入栈操作
pub fn push(&mut self) -> Arc<RefCell<SubScope>> {
let s = Arc::new(RefCell::new(SubScope::new()));
self.stack
.last()
.unwrap()

第三章 面向 LLVM IR 的类 C 语言编译器
.borrow_mut()
.children
.push(s.clone());
s.borrow_mut().parent = Some(Arc::<_>::downgrade(self.stack.last().unwrap()));
self.stack.push(s.clone());
self.all_scopes.push(s.clone());
s
}
// 对作用域进行出栈操作
pub fn pop(&mut self) {
self.stack.pop();
if self.stack.is_empty() {
panic!(”Top scope is being poped!”);
}
}
// 从栈顶开始逐级查找变量，直到找到为止
pub fn get(&mut self, name: &str) -> Option<Arc<RefCell<Entity>>> {
for s in self.stack.iter().rev() {
if s.borrow().get(name).is_some() {
return Some(s.borrow().get(name).unwrap());
}
}
None
}
// 在栈顶定义变量
pub fn define_variable(
&mut self,
name: &str,
location: Range<usize>,
_type: Arc<Type>,
expr: Option<Box<dyn ExprNode>>,
) -> Result<Arc<RefCell<Entity>>, ParserError> {
self.stack
.last()
.unwrap()
.borrow_mut()
.define_variable(name, location, _type, expr)
}
// 在根作用域定义函数
pub fn define_function(
&mut self,
name: &str,
location: Range<usize>,
_type: Arc<Type>,
_extern: bool,
) -> Result<Arc<RefCell<Entity>>, ParserError> {

19

第三章 面向 LLVM IR 的类 C 语言编译器
self.stack
.first()
.unwrap()
.borrow_mut()
.define_function(name, location, _type, _extern)
}
}

3.4.3

子作用域

子作用域用于保存某一级作用域中定义的变量或者函数。
// 子作用域定义
pub struct SubScope {
children: Vec<Arc<RefCell<SubScope>>>,
pub entities: HashMap<String, Arc<RefCell<Entity>>>,
parent: Option<Weak<RefCell<SubScope>>>,
}
impl SubScope {
// 创建新的子作用域
fn new() -> SubScope {
SubScope {
children: Vec::new(),
entities: HashMap::new(),
parent: None,
}
}
// 获取实体
fn get(&self, name: &str) -> Option<Arc<RefCell<Entity>>> {
self.entities.get(name).map(|s| s.to_owned())
}
// 递归获取实体
pub fn get_recursive(&self, name: &str) -> Option<Arc<RefCell<Entity>>> {
if let Some(e) = self.get(name) {
return Some(e);
}
match self.parent {
Some(ref p) => p.upgrade().unwrap().borrow().get_recursive(name),
None => None,
}
}
// 定义函数
fn define_function(
&mut self,
name: &str,
location: Range<usize>,
_type: Arc<Type>,

20

第三章 面向 LLVM IR 的类 C 语言编译器
_extern: bool,
) -> Result<Arc<RefCell<Entity>>, ParserError> {
// 如果已经定义，返回报错，并附加重名实体的定义位置
if let Some(v) = self.entities.get(name) {
return Err(ParserError::EntityNameConflict(
name.to_string(),
v.borrow().get_location().clone(),
));
}
let e = Arc::new(RefCell::new(Entity::Function(FunctionEntity {
name: name.to_owned(),
location,
_type,
_extern,
llvm: None,
})));
self.entities.insert(name.to_owned(), e.clone());
Ok(e)
}
// 定义变量
fn define_variable(
&mut self,
name: &str,
location: Range<usize>,
_type: Arc<Type>,
expr: Option<Box<dyn ExprNode>>,
) -> Result<Arc<RefCell<Entity>>, ParserError> {
// 如果已经定义，返回报错，并附加重名实体的定义位置
if let Some(v) = self.entities.get(name) {
return Err(ParserError::EntityNameConflict(
name.to_string(),
v.borrow().get_location().clone(),
));
}
self.entities.insert(
name.to_string(),
Arc::new(RefCell::new(Entity::Variable(VariableEntity {
name: name.to_string(),
location,
_type,
init_expr: expr,
llvm: None,
}))),
);
Ok(self.entities.get(name).unwrap().clone())
}

21

第三章 面向 LLVM IR 的类 C 语言编译器

22

}

3.4.4

错误报告

3.5

代码生成

