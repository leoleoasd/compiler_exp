
@inproceedings{lattnerLLVMCompilationFramework2004,
  title      = {{{LLVM}}: A Compilation Framework for Lifelong Program Analysis \& Transformation},
  shorttitle = {{{LLVM}}},
  booktitle  = {International {{Symposium}} on {{Code Generation}} and {{Optimization}}, 2004. {{CGO}} 2004.},
  author     = {Lattner, C. and Adve, V.},
  year       = {2004},
  month      = mar,
  pages      = {75--86},
  doi        = {10.1109/CGO.2004.1281665},
  abstract   = {We describe LLVM (low level virtual machine), a compiler framework designed to support transparent, lifelong program analysis and transformation for arbitrary programs, by providing high-level information to compiler transformations at compile-time, link-time, run-time, and in idle time between runs. LLVM defines a common, low-level code representation in static single assignment (SSA) form, with several novel features: a simple, language-independent type-system that exposes the primitives commonly used to implement high-level language features; an instruction for typed address arithmetic; and a simple mechanism that can be used to implement the exception handling features of high-level languages (and setjmp/longjmp in C) uniformly and efficiently. The LLVM compiler framework and code representation together provide a combination of key capabilities that are important for practical, lifelong analysis and transformation of programs. To our knowledge, no existing compilation approach provides all these capabilities. We describe the design of the LLVM representation and compiler framework, and evaluate the design in three ways: (a) the size and effectiveness of the representation, including the type information it provides; (b) compiler performance for several interprocedural problems; and (c) illustrative examples of the benefits LLVM provides for several challenging compiler problems.},
  keywords   = {Algorithm design and analysis,Application software,Arithmetic,High level languages,Information analysis,Performance analysis,Program processors,Runtime,Software safety,Virtual machining}
}


@article{parrANTLRPredicatedLLParser1995,
  title      = {{{ANTLR}}: A Predicated-{{{\emph{LL}}}}{\emph{(k)}} Parser Generator},
  shorttitle = {{{ANTLR}}},
  author     = {Parr, T. J. and Quong, R. W.},
  year       = {1995},
  month      = jul,
  journal    = {Software\textemdash Practice \& Experience},
  volume     = {25},
  number     = {7},
  pages      = {789--810},
  issn       = {0038-0644},
  doi        = {10.1002/spe.4380250705},
  keywords   = {compiler,LL(k) parser,parser generator,parsing,predicates}
}



@book{qingmufenglangZiZhiBianYiQi,
  title  = {自制编译器},
  author = {青木峰郎},
  isbn   = {978-7-115-42218-7},
  year   = {2004}
}


